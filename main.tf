variable "aws_region" {
  default = "us-west-2"
}

provider "aws" {
  region  = "${var.aws_region}"
}

// 2) Setup our lambda parameters and .zip file that will be uploaded to AWS
locals {
	// The name of our lambda function when is created in AWS
	function_name = "webappserverless"
	// When our lambda is run / invoked later on, run the "handler"
	// function exported from the "index" file
	handler = "index.handler"
	// Run our lambda in node v14
	runtime = "nodejs14.x"
	// By default lambda only runs for a max of 3 seconds but our
	// "hello world" is printed after 5 seconds. So, we need to
	// increase how long we let our lambda run (e.g. 6 seconds)
	timeout = 6

	// The .zip file we will create and upload to AWS later on
	zip_file = "webappserverless.zip"
}

// 3) Let terraform create a .zip file on your local computer which contains
//    only our "index.js" file by ignoring any Terraform files (e.g. our .zip)
data "archive_file" "zip" {
	excludes = [
		".env",
		".terraform",
		"terraform",
		".terraform.lock.hcl",
		"docker-compose.yml",
		"main.tf",
		"terraform.tfstate",
		"terraform.tfstate.backup",
		local.zip_file,
	]
	source_dir = data.archive_file.module
	type = "zip"

	// Create the .zip file in the same directory as the index.js file
	output_path = "${path.module}/${local.zip_file}"
}

// 4) Create an AWS IAM resource who will act as an intermediary between
//    our lambda and other AWS services such as Cloudwatch for "console.log"
data "aws_iam_policy_document" "default" {
	version = "2012-10-17"

	statement {
		// Let the IAM resource have temporary admin permissions to
		// add permissions for itself.
		// https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html
		actions = ["sts:AssumeRole"]
		effect = "Allow"

		// Let the IAM resource manage our (future) lambda resource
		// https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services
		principals {
			identifiers = ["lambda.amazonaws.com"]
			type = "Service"
		}
	}
}
resource "aws_iam_role" "default" {
	// Create a IAM resource in AWS which is given the permissions detailed
	// in our above policy document

	assume_role_policy = data.aws_iam_policy_document.default.json
	// name = is randomly generated by terraform
}
resource "aws_iam_role_policy_attachment" "default" {
	// In addition to letting our IAM resource connect to our (future) lambda
	// function, we also want to let our IAM resource connect to other AWS services
	// like Cloudwatch for to see our "console.log"
	// https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html#permissions-executionrole-features

	policy_arn  = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
	role = aws_iam_role.default.name
}

// 5) Create our lambda function in AWS and upload our .zip with our code to it
resource "aws_lambda_function" "default" {
	// Function parameters we defined at the beginning
	function_name = local.function_name
	handler = local.handler
	runtime = local.runtime
	timeout = local.timeout

	// Upload the .zip file Terraform created to AWS
	filename =  data.archive_file.zip.output_path
	source_code_hash = data.archive_file.zip.output_base64sha256

	// Connect our IAM resource to our lambda function in AWS
	role = aws_iam_role.default.arn

	// Optional environmental variables
	
}

resource "aws_apigatewayv2_api" "lambda" {
  name          = "serverless_gw"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_stage" "lambda" {
  api_id = aws_apigatewayv2_api.lambda.id

  name        = "serverless_stage"
  auto_deploy = true

  access_log_settings {
    destination_arn = aws_cloudwatch_log_group.api_gw.arn

    format = jsonencode({
      requestId               = "$context.requestId"
      sourceIp                = "$context.identity.sourceIp"
      requestTime             = "$context.requestTime"
      protocol                = "$context.protocol"
      httpMethod              = "$context.httpMethod"
      resourcePath            = "$context.resourcePath"
      routeKey                = "$context.routeKey"
      status                  = "$context.status"
      responseLength          = "$context.responseLength"
      integrationErrorMessage = "$context.integrationErrorMessage"
      }
    )
  }
}

resource "aws_apigatewayv2_integration" "default" {
  api_id = aws_apigatewayv2_api.lambda.id

  integration_uri    = aws_lambda_function.default.invoke_arn
  integration_type   = "AWS_PROXY"
  integration_method = "POST"
}

resource "aws_apigatewayv2_route" "default" {
  api_id = aws_apigatewayv2_api.lambda.id

  route_key = "GET /hello"
  target    = "integrations/${aws_apigatewayv2_integration.default.id}"
}

resource "aws_cloudwatch_log_group" "api_gw" {
  name = "/aws/api_gw/${aws_apigatewayv2_api.lambda.name}"

  retention_in_days = 30
}

resource "aws_lambda_permission" "api_gw" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.default.function_name
  principal     = "apigateway.amazonaws.com"

  source_arn = "${aws_apigatewayv2_api.lambda.execution_arn}/*/*"
}

output "default" {
  description = "Name of the Lambda function."

  value = aws_lambda_function.default.function_name
}

output "base_url" {
  description = "Base URL for API Gateway stage."

  value = aws_apigatewayv2_stage.lambda.invoke_url
}
